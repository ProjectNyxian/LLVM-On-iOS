# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: BuildLLVMJob
  timeoutInMinutes: 0
  pool:
    vmImage: macOS-10.15

  steps:

  - script: |
      ./build-tools.sh
      export REPO_ROOT=`pwd`
      export PATH=$PATH:$REPO_ROOT/tools/bin
      PLATFORMS=("iOS" "macOS") # iOS-Sim
      for p in ${PLATFORMS[@]}; do
        ./build-libffi.sh $p
      done
      tar -cJf libffi.tar.xz libffi/Release-iphoneos libffi/Release-maccatalyst
    displayName: 'Checkout and build libffi'
    enabled: true

  - publish: $(System.DefaultWorkingDirectory)/libffi.tar.xz
    artifact: libffi
    displayName: 'Publish libffi'
    enabled: true

  - script: ./build-llvm-framework.sh
    displayName: 'Checkout and build llvm framework'
    enabled: false

  - publish: $(System.DefaultWorkingDirectory)/llvm-project/build
    artifact: CMakeOutputs
    displayName: 'Publish CMake output for inspection'
    enabled: false

  - publish: $(System.DefaultWorkingDirectory)/LLVM.xcframework.tar.xz
    artifact: LLVM.xcframework
    displayName: 'Publish LLVM XCFramework'
    enabled: false

  - publish: $(System.DefaultWorkingDirectory)/LLVM-iOS.tar.xz
    artifact: LLVM-iOS
    displayName: 'Publish LLVM iOS Lib'
    enabled: false

  - publish: $(System.DefaultWorkingDirectory)/LLVM-macOS.tar.xz
    artifact: LLVM-macOS
    displayName: 'Publish LLVM macOS Lib'
    enabled: false

  - publish: $(System.DefaultWorkingDirectory)/LLVM-Clang-iOS.tar.xz
    artifact: LLVM-Clang-iOS
    displayName: 'Publish LLVM Clang Headers'
    enabled: false
